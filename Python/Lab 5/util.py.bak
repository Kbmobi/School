# Keegan Bailey / Lab 03 ++ Utilites Module
# getInt
#   get 1st attempt
#   while not valid:
#       print error
#       get next attempt
#   return result
#
# [+/-]digits.digits
#   optional sign
#   bunch o'digits
#   dot
#   truckload more digits
import string
###############################################################################
def getSymbol(prompt='Enter a single punctuation symbol: ', error='Error'):
    sym = raw_input(prompt)
    if len(sym) != 1: 
        print error
        return getSymbol()
    elif sym in string.punctuation:
        return sym

def isvFloat(numstring):
    pos = 0
    dot = 0
    if numstring[0] in "+-":
        sign = numstring[0]
        pos += 1
    else:
        sign = "+"
    while pos < len(numstring):
        if numstring[pos] not in string.digits:
            if numstring[pos] == string.punctuation[13]: #string.punctuation[13] = "."
                pos += 1
                dot += 1
            else:
                return False
        else: 
            pos += 1
    if dot > 1:
        return False
    else:
        return True

def getFloat(prompt='Enter an number: ',
            error='Error, invalid input - try again '):
    numstring = raw_input(prompt)
    while not isvFloat(numstring):
        print error
        numstring = raw_input(prompt)
    return float(numstring)

def isvInt(numstring):
    pos = 0
    if numstring[0] in "+-":
        sign = numstring[0]
        pos += 1
    else:
        sign = "+"
    while pos < len(numstring):
        if numstring[pos] not in string.digits:
            return False
        else: 
            pos += 1
    return True

def getInt(prompt='Enter an integer: ',
            error='Error, invalid input - try again '):
    numstring = raw_input(prompt)
    while not isvInt(numstring):
        print error
        numstring = raw_input(prompt)
    return int(numstring)

def isvTime(time):
    pos = 0
    if time[0] in "+-":
        return False
    elif len(time) > 4:
        return False
    elif time[0] in "0":
        time = time[1:]    
    else:
        sign = "+"
    while pos < len(time):
        if time[pos] not in string.digits:
            return False
        else: 
            pos += 1
    time = int(time)
    if 2400 < time <= 0:
        return false
    else:
        time = str(time)
        if len(time) == 3:
            time = "0"+time
        return True 
            

def getTime(prompt='Enter a 4 digit time (ex: 0330 = 3:30AM): ',
            error='Error, invalid input - try again '):
    time = raw_input(prompt)
    while not isvTime(time):
        print error
        time = raw_input(prompt)
    return time

#getInt testing

#if __name__ == '__main__':
#   print getFloat('Put in a number ', 'wrong')
    
